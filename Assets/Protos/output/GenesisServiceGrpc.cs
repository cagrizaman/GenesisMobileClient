// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GenesisService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class GenesisSimulator
{
  static readonly string __ServiceName = "GenesisSimulator";

  static readonly grpc::Marshaller<global::HelloRequest> __Marshaller_HelloRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HelloRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::HelloReply> __Marshaller_HelloReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HelloReply.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::CameraRequest> __Marshaller_CameraRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::CameraReply> __Marshaller_CameraReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraReply.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::CameraUpdate> __Marshaller_CameraUpdate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CameraUpdate.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Confirmation> __Marshaller_Confirmation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Confirmation.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Point> __Marshaller_Point = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Point.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Empty.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::DetectionPlane> __Marshaller_DetectionPlane = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DetectionPlane.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::DetectionPoint> __Marshaller_DetectionPoint = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DetectionPoint.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::PointList> __Marshaller_PointList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PointList.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::DetectionPointList> __Marshaller_DetectionPointList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DetectionPointList.Parser.ParseFrom);

  static readonly grpc::Method<global::HelloRequest, global::HelloReply> __Method_SayHello = new grpc::Method<global::HelloRequest, global::HelloReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SayHello",
      __Marshaller_HelloRequest,
      __Marshaller_HelloReply);

  static readonly grpc::Method<global::HelloRequest, global::HelloReply> __Method_SayHelloAgain = new grpc::Method<global::HelloRequest, global::HelloReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SayHelloAgain",
      __Marshaller_HelloRequest,
      __Marshaller_HelloReply);

  static readonly grpc::Method<global::CameraRequest, global::CameraReply> __Method_GetCameraTransform = new grpc::Method<global::CameraRequest, global::CameraReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetCameraTransform",
      __Marshaller_CameraRequest,
      __Marshaller_CameraReply);

  static readonly grpc::Method<global::CameraUpdate, global::Confirmation> __Method_UpdateCamera = new grpc::Method<global::CameraUpdate, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "UpdateCamera",
      __Marshaller_CameraUpdate,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::Point, global::Confirmation> __Method_RecordPoints = new grpc::Method<global::Point, global::Confirmation>(
      grpc::MethodType.ClientStreaming,
      __ServiceName,
      "RecordPoints",
      __Marshaller_Point,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::Point, global::Confirmation> __Method_SendSinglePoint = new grpc::Method<global::Point, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SendSinglePoint",
      __Marshaller_Point,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::Empty, global::Point> __Method_LoadMap = new grpc::Method<global::Empty, global::Point>(
      grpc::MethodType.ServerStreaming,
      __ServiceName,
      "LoadMap",
      __Marshaller_Empty,
      __Marshaller_Point);

  static readonly grpc::Method<global::Empty, global::Confirmation> __Method_SaveMap = new grpc::Method<global::Empty, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SaveMap",
      __Marshaller_Empty,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::DetectionPlane, global::Confirmation> __Method_AddPlaneObject = new grpc::Method<global::DetectionPlane, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "AddPlaneObject",
      __Marshaller_DetectionPlane,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::DetectionPoint, global::Confirmation> __Method_AddPointObject = new grpc::Method<global::DetectionPoint, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "AddPointObject",
      __Marshaller_DetectionPoint,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::PointList, global::Confirmation> __Method_AddPointList = new grpc::Method<global::PointList, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "AddPointList",
      __Marshaller_PointList,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::DetectionPointList, global::Confirmation> __Method_AddDetectionPointList = new grpc::Method<global::DetectionPointList, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "AddDetectionPointList",
      __Marshaller_DetectionPointList,
      __Marshaller_Confirmation);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::GenesisServiceReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of GenesisSimulator</summary>
  [grpc::BindServiceMethod(typeof(GenesisSimulator), "BindService")]
  public abstract partial class GenesisSimulatorBase
  {
    /// <summary>
    /// Sends a greeting
    /// </summary>
    /// <param name="request">The request received from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::HelloReply> SayHello(global::HelloRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::HelloReply> SayHelloAgain(global::HelloRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::CameraReply> GetCameraTransform(global::CameraRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> UpdateCamera(global::CameraUpdate request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> RecordPoints(grpc::IAsyncStreamReader<global::Point> requestStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> SendSinglePoint(global::Point request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task LoadMap(global::Empty request, grpc::IServerStreamWriter<global::Point> responseStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> SaveMap(global::Empty request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> AddPlaneObject(global::DetectionPlane request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> AddPointObject(global::DetectionPoint request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> AddPointList(global::PointList request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> AddDetectionPointList(global::DetectionPointList request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for GenesisSimulator</summary>
  public partial class GenesisSimulatorClient : grpc::ClientBase<GenesisSimulatorClient>
  {
    /// <summary>Creates a new client for GenesisSimulator</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public GenesisSimulatorClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for GenesisSimulator that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public GenesisSimulatorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected GenesisSimulatorClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected GenesisSimulatorClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    /// Sends a greeting
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::HelloReply SayHello(global::HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SayHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Sends a greeting
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The response received from the server.</returns>
    public virtual global::HelloReply SayHello(global::HelloRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
    }
    /// <summary>
    /// Sends a greeting
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::HelloReply> SayHelloAsync(global::HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SayHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Sends a greeting
    /// </summary>
    /// <param name="request">The request to send to the server.</param>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncUnaryCall<global::HelloReply> SayHelloAsync(global::HelloRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
    }
    public virtual global::HelloReply SayHelloAgain(global::HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SayHelloAgain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::HelloReply SayHelloAgain(global::HelloRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SayHelloAgain, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::HelloReply> SayHelloAgainAsync(global::HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SayHelloAgainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::HelloReply> SayHelloAgainAsync(global::HelloRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SayHelloAgain, null, options, request);
    }
    public virtual global::CameraReply GetCameraTransform(global::CameraRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetCameraTransform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::CameraReply GetCameraTransform(global::CameraRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetCameraTransform, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::CameraReply> GetCameraTransformAsync(global::CameraRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetCameraTransformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::CameraReply> GetCameraTransformAsync(global::CameraRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetCameraTransform, null, options, request);
    }
    public virtual global::Confirmation UpdateCamera(global::CameraUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UpdateCamera(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation UpdateCamera(global::CameraUpdate request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_UpdateCamera, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> UpdateCameraAsync(global::CameraUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return UpdateCameraAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> UpdateCameraAsync(global::CameraUpdate request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_UpdateCamera, null, options, request);
    }
    public virtual grpc::AsyncClientStreamingCall<global::Point, global::Confirmation> RecordPoints(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RecordPoints(new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncClientStreamingCall<global::Point, global::Confirmation> RecordPoints(grpc::CallOptions options)
    {
      return CallInvoker.AsyncClientStreamingCall(__Method_RecordPoints, null, options);
    }
    public virtual global::Confirmation SendSinglePoint(global::Point request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SendSinglePoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation SendSinglePoint(global::Point request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SendSinglePoint, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> SendSinglePointAsync(global::Point request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SendSinglePointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> SendSinglePointAsync(global::Point request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SendSinglePoint, null, options, request);
    }
    public virtual grpc::AsyncServerStreamingCall<global::Point> LoadMap(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return LoadMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncServerStreamingCall<global::Point> LoadMap(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncServerStreamingCall(__Method_LoadMap, null, options, request);
    }
    public virtual global::Confirmation SaveMap(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SaveMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation SaveMap(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SaveMap, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> SaveMapAsync(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SaveMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> SaveMapAsync(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SaveMap, null, options, request);
    }
    public virtual global::Confirmation AddPlaneObject(global::DetectionPlane request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddPlaneObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation AddPlaneObject(global::DetectionPlane request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_AddPlaneObject, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddPlaneObjectAsync(global::DetectionPlane request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddPlaneObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddPlaneObjectAsync(global::DetectionPlane request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_AddPlaneObject, null, options, request);
    }
    public virtual global::Confirmation AddPointObject(global::DetectionPoint request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddPointObject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation AddPointObject(global::DetectionPoint request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_AddPointObject, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddPointObjectAsync(global::DetectionPoint request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddPointObjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddPointObjectAsync(global::DetectionPoint request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_AddPointObject, null, options, request);
    }
    public virtual global::Confirmation AddPointList(global::PointList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddPointList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation AddPointList(global::PointList request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_AddPointList, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddPointListAsync(global::PointList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddPointListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddPointListAsync(global::PointList request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_AddPointList, null, options, request);
    }
    public virtual global::Confirmation AddDetectionPointList(global::DetectionPointList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddDetectionPointList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation AddDetectionPointList(global::DetectionPointList request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_AddDetectionPointList, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddDetectionPointListAsync(global::DetectionPointList request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddDetectionPointListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> AddDetectionPointListAsync(global::DetectionPointList request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_AddDetectionPointList, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override GenesisSimulatorClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new GenesisSimulatorClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(GenesisSimulatorBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_SayHello, serviceImpl.SayHello)
        .AddMethod(__Method_SayHelloAgain, serviceImpl.SayHelloAgain)
        .AddMethod(__Method_GetCameraTransform, serviceImpl.GetCameraTransform)
        .AddMethod(__Method_UpdateCamera, serviceImpl.UpdateCamera)
        .AddMethod(__Method_RecordPoints, serviceImpl.RecordPoints)
        .AddMethod(__Method_SendSinglePoint, serviceImpl.SendSinglePoint)
        .AddMethod(__Method_LoadMap, serviceImpl.LoadMap)
        .AddMethod(__Method_SaveMap, serviceImpl.SaveMap)
        .AddMethod(__Method_AddPlaneObject, serviceImpl.AddPlaneObject)
        .AddMethod(__Method_AddPointObject, serviceImpl.AddPointObject)
        .AddMethod(__Method_AddPointList, serviceImpl.AddPointList)
        .AddMethod(__Method_AddDetectionPointList, serviceImpl.AddDetectionPointList).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, GenesisSimulatorBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HelloRequest, global::HelloReply>(serviceImpl.SayHello));
    serviceBinder.AddMethod(__Method_SayHelloAgain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::HelloRequest, global::HelloReply>(serviceImpl.SayHelloAgain));
    serviceBinder.AddMethod(__Method_GetCameraTransform, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CameraRequest, global::CameraReply>(serviceImpl.GetCameraTransform));
    serviceBinder.AddMethod(__Method_UpdateCamera, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CameraUpdate, global::Confirmation>(serviceImpl.UpdateCamera));
    serviceBinder.AddMethod(__Method_RecordPoints, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Point, global::Confirmation>(serviceImpl.RecordPoints));
    serviceBinder.AddMethod(__Method_SendSinglePoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Point, global::Confirmation>(serviceImpl.SendSinglePoint));
    serviceBinder.AddMethod(__Method_LoadMap, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Empty, global::Point>(serviceImpl.LoadMap));
    serviceBinder.AddMethod(__Method_SaveMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Empty, global::Confirmation>(serviceImpl.SaveMap));
    serviceBinder.AddMethod(__Method_AddPlaneObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DetectionPlane, global::Confirmation>(serviceImpl.AddPlaneObject));
    serviceBinder.AddMethod(__Method_AddPointObject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DetectionPoint, global::Confirmation>(serviceImpl.AddPointObject));
    serviceBinder.AddMethod(__Method_AddPointList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::PointList, global::Confirmation>(serviceImpl.AddPointList));
    serviceBinder.AddMethod(__Method_AddDetectionPointList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DetectionPointList, global::Confirmation>(serviceImpl.AddDetectionPointList));
  }

}
#endregion
